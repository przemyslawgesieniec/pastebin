
import org.bouncycastle.bcpg.ArmoredOutputStream;
import org.bouncycastle.bcpg.SSHAgentPublicKey;
import org.bouncycastle.openpgp.*;
import org.bouncycastle.openpgp.operator.jcajce.JcaPGPKeyPair;
import org.bouncycastle.openpgp.operator.jcajce.JcaPGPDigestCalculatorProviderBuilder;
import org.bouncycastle.openpgp.operator.jcajce.JcaPGPKeyPair;
import org.bouncycastle.openpgp.operator.jcajce.JcePBESecretKeyEncryptorBuilder;
import org.bouncycastle.openpgp.operator.jcajce.JcePublicKeyKeyEncryptionMethodGenerator;
import org.bouncycastle.openpgp.operator.jcajce.JcePublicKeyDataDecryptorFactoryBuilder;
import org.bouncycastle.openpgp.operator.jcajce.JcePublicKeyKeyEncryptionMethodGenerator;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.Security;
import java.security.spec.X509EncodedKeySpec;
import java.util.Date;

public class SshToPgpConverter {

    public static void main(String[] args) throws Exception {
        // Wstaw sw√≥j klucz SSH-RSA tutaj
        String sshRsaKey = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3meYEdZRt+jPSKPjLfRHEHvEUVSOPZf...";
        
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        
        // Konwersja klucza SSH-RSA na PublicKey
        PublicKey publicKey = convertSshRsaToPublicKey(sshRsaKey);

        // Tworzenie klucza PGP na podstawie klucza publicznego
        PGPPublicKey pgpPublicKey = createPgpPublicKey(publicKey);
        
        // Zapis klucza PGP do pliku
        try (FileOutputStream fos = new FileOutputStream("pgpPublicKey.asc");
             ArmoredOutputStream aos = new ArmoredOutputStream(fos)) {
            pgpPublicKey.encode(aos);
        }
        
        System.out.println("Public PGP key successfully created and saved to pgpPublicKey.asc");
    }

    public static PublicKey convertSshRsaToPublicKey(String sshRsaKey) throws Exception {
        String[] parts = sshRsaKey.split(" ");
        byte[] keyBytes = java.util.Base64.getDecoder().decode(parts[1]);

        X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
        KeyFactory kf = KeyFactory.getInstance("RSA");
        return kf.generatePublic(spec);
    }

    public static PGPPublicKey createPgpPublicKey(PublicKey publicKey) throws Exception {
        Date now = new Date();
        JcaPGPKeyPair pgpKeyPair = new JcaPGPKeyPair(PGPPublicKey.RSA_GENERAL, publicKey, now);
        
        return new PGPPublicKey(pgpKeyPair.getPublicKey());
    }
}

